import os
import json
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
from telegram.error import TimedOut, NetworkError
from supabase import create_client, Client
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
print(f"BOT_TOKEN: {BOT_TOKEN}")
print(f"SUPABASE_URL: {SUPABASE_URL}")
print(f"SUPABASE_KEY: {SUPABASE_KEY}")
print(f"ADMIN_CHAT_ID: {ADMIN_CHAT_ID}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not all([BOT_TOKEN, SUPABASE_URL, SUPABASE_KEY, ADMIN_CHAT_ID]):
    raise ValueError("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: {e}")
    raise

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Å–∞–π—Ç—É)
PRODUCTS = [
    {"id": 1, "name": "Uludaƒü Premium Sparkling 250 –º–ª", "price": 14900, "description": "–û—Å–≤–µ–∂–∞—é—â–∞—è –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–æ–¥–∞ –¥–ª—è –±–ª—é–¥."},
    {"id": 2, "name": "Uludaƒü Premium Sparkling 750 –º–ª", "price": 27300, "description": "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."},
    {"id": 3, "name": "Uludaƒü Premium Still 350 –º–ª", "price": 12550, "description": "–ú—è–≥–∫–∞—è –≤–æ–¥–∞ –¥–ª—è –≤–∏–Ω –∏ –¥–µ—Å–µ—Ä—Ç–æ–≤."},
    {"id": 4, "name": "Uludaƒü Premium Still 750 –º–ª", "price": 23500, "description": "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –Ω–µ–≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–æ–¥–∞."},
    {"id": 5, "name": "Uludaƒü Premium 1 –ª–∏—Ç—Ä", "price": 19500, "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–æ–¥–∞ –¥–ª—è –ª—é–±—ã—Ö —Ü–µ–ª–µ–π."},
    {"id": 6, "name": "Uludaƒü Classic 250 –º–ª", "price": 8000, "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤–∫—É—Å Uludaƒü."},
    {"id": 7, "name": "Uludaƒü Special Edition 250 –º–ª", "price": 9500, "description": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤."},
]

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not context.user_data.get("agreed", False):
        keyboard = [
            [InlineKeyboardButton("–Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Uludaƒü Market Bot! ü•§\n\n"
            "–û–û–û 'Serrada Uludaƒü Uzbekistan' –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ü–∏—é Uludaƒü. "
            "–ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã.",
            reply_markup=reply_markup
        )
    else:
        show_catalog(update, context)

def button_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    query.answer()

    user_id = query.from_user.id
    username = query.from_user.username or "Unknown"

    if query.data == "agree":
        context.user_data["agreed"] = True
        query.message.delete()
        show_catalog(update, context)
    elif query.data == "show_cart":
        show_cart(update, context)
    elif query.data == "checkout":
        checkout(update, context)
    elif query.data == "catalog":
        show_catalog(update, context)
    elif query.data == "clear_cart":
        context.user_data["cart"] = []
        query.message.reply_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞! üóëÔ∏è")
        show_catalog(update, context)
    elif query.data.startswith("add_"):
        product_id = int(query.data.split("_")[1])
        context.user_data["selected_product"] = product_id
        show_quantity_selector(update, context)
    elif query.data.startswith("quantity_"):
        _, product_id, quantity = query.data.split("_")
        product_id = int(product_id)
        quantity = int(quantity)
        add_to_cart(update, context, product_id, quantity)

def show_catalog(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤."""
    keyboard = []
    for product in PRODUCTS:
        keyboard.append([
            InlineKeyboardButton(
                f"{product['name']} - {product['price']} UZS",
                callback_data=f"add_{product['id']}"
            )
        ])
    keyboard.append([InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É üõí", callback_data="show_cart")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Uludaƒü Market! ü•§\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:"
    if update.callback_query:
        update.callback_query.message.reply_text(message, reply_markup=reply_markup)
    else:
        update.message.reply_text(message, reply_markup=reply_markup)

def show_quantity_selector(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞."""
    product_id = context.user_data.get("selected_product")
    if not product_id:
        update.callback_query.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    product = next((p for p in PRODUCTS if p["id"] == product_id), None)
    if not product:
        update.callback_query.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    keyboard = [
        [
            InlineKeyboardButton("1", callback_data=f"quantity_{product_id}_1"),
            InlineKeyboardButton("2", callback_data=f"quantity_{product_id}_2"),
            InlineKeyboardButton("5", callback_data=f"quantity_{product_id}_5"),
        ],
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É üîô", callback_data="catalog")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product['name']}\n–¶–µ–Ω–∞: {product['price']} UZS\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=reply_markup
    )

def add_to_cart(update: Update, context: CallbackContext, product_id: int, quantity: int) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º."""
    if "cart" not in context.user_data:
        context.user_data["cart"] = []
    product = next((p for p in PRODUCTS if p["id"] == product_id), None)
    if not product:
        update.callback_query.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º,–µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
    for item in context.user_data["cart"]:
        if item["id"] == product_id:
            item["quantity"] += quantity
            break
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        context.user_data["cart"].append({
            "id": product_id,
            "name": product["name"],
            "price": product["price"],
            "quantity": quantity
        })
    update.callback_query.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {product['name']} ({quantity} —à—Ç.)")

def show_cart(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã."""
    if "cart" not in context.user_data or not context.user_data["cart"]:
        update.callback_query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. üõí")
        return

    cart = context.user_data["cart"]
    total = sum(item["price"] * item["quantity"] for item in cart)
    message = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    for item in cart:
        message += f"- {item['name']} ({item['quantity']} —à—Ç.) - {item['price'] * item['quantity']} UZS\n"
    message += f"\n–ò—Ç–æ–≥–æ: {total} UZS"

    keyboard = [
        [InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚úÖ", callback_data="checkout")],
        [InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É üóëÔ∏è", callback_data="clear_cart")],
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É üîô", callback_data="catalog")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.callback_query.message.reply_text(message, reply_markup=reply_markup)

def checkout(update: Update, context: CallbackContext) -> None:
    """–û—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É."""
    user_id = update.callback_query.from_user.id
    username = update.callback_query.from_user.username or "Unknown"
    cart = context.user_data.get("cart", [])

    if not cart:
        update.callback_query.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. üõí")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ Supabase
    order_data = {
        "user_id": user_id,
        "username": username,
        "cart": cart,
    }
    try:
        response = supabase.table("orders").insert(order_data).execute()
        print(f"Supabase response: {response}")
    except Exception as e:
        print(f"Error saving to Supabase: {e}")
        update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    total = sum(item["price"] * item["quantity"] for item in cart)
    message = f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{username} (ID: {user_id}):\n\n"
    for item in cart:
        message += f"- {item['name']} ({item['quantity']} —à—Ç.) - {item['price'] * item['quantity']} UZS\n"
    message += f"\n–ò—Ç–æ–≥–æ: {total} UZS"

    for attempt in range(3):  # –ü—Ä–æ–±—É–µ–º 3 —Ä–∞–∑–∞
        try:
            context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)
            break
        except (TimedOut, NetworkError) as e:
            print(f"Error sending message to admin (attempt {attempt + 1}/3): {e}")
            if attempt < 2:
                time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            else:
                update.callback_query.message.reply_text("–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞.")
                print("Failed to notify admin after 3 attempts.")

    # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    context.user_data["cart"] = []
    update.callback_query.message.reply_text("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ")

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–Ω–∏–µ Updater —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
    updater = Updater(BOT_TOKEN, use_context=True, request_kwargs={'read_timeout': 10, 'connect_timeout': 10})

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp = updater.dispatcher

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_callback))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("Bot is running...")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()